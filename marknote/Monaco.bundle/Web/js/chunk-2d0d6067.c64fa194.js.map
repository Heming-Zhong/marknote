{"version":3,"sources":["webpack:///./node_modules/prismjs/components/prism-scheme.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,YAAY,uBAAuB;AACnC,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA,CAAC","file":"js/chunk-2d0d6067.c64fa194.js","sourcesContent":["(function (Prism) {\n\tPrism.languages.scheme = {\n\t\t// this supports \"normal\" single-line comments:\n\t\t//   ; comment\n\t\t// and (potentially nested) multiline comments:\n\t\t//   #| comment #| nested |# still comment |#\n\t\t// (only 1 level of nesting is supported)\n\t\t'comment': /;.*|#;\\s*\\((?:[^()]|\\([^()]*\\))*\\)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,\n\t\t'string': {\n\t\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n\t\t\tgreedy: true\n\t\t},\n\t\t'symbol': {\n\t\t\tpattern: /'[^()#'\\s]+/,\n\t\t\tgreedy: true\n\t\t},\n\t\t'character': {\n\t\t\tpattern: /#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|\\S)/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'lambda-parameter': [\n\t\t\t// https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\n\t\t\t{\n\t\t\t\tpattern: /((?:^|[^'`#])\\(lambda\\s+)(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /((?:^|[^'`#])\\(lambda\\s+\\()[^()']+/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'keyword': {\n\t\t\tpattern: /((?:^|[^'`#])\\()(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\s]|$)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'builtin': {\n\t\t\t// all functions of the base library of R7RS plus some of built-ins of R5Rs\n\t\t\tpattern: /((?:^|[^'`#])\\()(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\s]|$)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'operator': {\n\t\t\tpattern: /((?:^|[^'`#])\\()(?:[-+*%/]|[<>]=?|=>?)(?=[()\\s]|$)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'number': {\n\t\t\t// The number pattern from [the R7RS spec](https://small.r7rs.org/attachment/r7rs.pdf).\n\t\t\t//\n\t\t\t// <number>      := <num 2>|<num 8>|<num 10>|<num 16>\n\t\t\t// <num R>       := <prefix R><complex R>\n\t\t\t// <complex R>   := <real R>(?:@<real R>|<imaginary R>)?|<imaginary R>\n\t\t\t// <imaginary R> := [+-](?:<ureal R>|(?:inf|nan)\\.0)?i\n\t\t\t// <real R>      := [+-]?<ureal R>|[+-](?:inf|nan)\\.0\n\t\t\t// <ureal R>     := <uint R>(?:\\/<uint R>)?\n\t\t\t//                | <decimal R>\n\t\t\t//\n\t\t\t// <decimal 10>  := (?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?\n\t\t\t// <uint R>      := <digit R>+\n\t\t\t// <prefix R>    := <radix R>(?:#[ei])?|(?:#[ei])?<radix R>\n\t\t\t// <radix 2>     := #b\n\t\t\t// <radix 8>     := #o\n\t\t\t// <radix 10>    := (?:#d)?\n\t\t\t// <radix 16>    := #x\n\t\t\t// <digit 2>     := [01]\n\t\t\t// <digit 8>     := [0-7]\n\t\t\t// <digit 10>    := \\d\n\t\t\t// <digit 16>    := [0-9a-f]\n\t\t\t//\n\t\t\t// The problem with this grammar is that the resulting regex is way to complex, so we simplify by grouping all\n\t\t\t// non-decimal bases together. This results in a decimal (dec) and combined binary, octal, and hexadecimal (box)\n\t\t\t// pattern:\n\t\t\tpattern: RegExp(SortedBNF({\n\t\t\t\t'<ureal dec>': /\\d+(?:\\/\\d+)?|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/.source,\n\t\t\t\t'<real dec>': /[+-]?<ureal dec>|[+-](?:inf|nan)\\.0/.source,\n\t\t\t\t'<imaginary dec>': /[+-](?:<ureal dec>|(?:inf|nan)\\.0)?i/.source,\n\t\t\t\t'<complex dec>': /<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>/.source,\n\t\t\t\t'<num dec>': /(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>/.source,\n\n\t\t\t\t'<ureal box>': /[0-9a-f]+(?:\\/[0-9a-f]+)?/.source,\n\t\t\t\t'<real box>': /[+-]?<ureal box>|[+-](?:inf|nan)\\.0/.source,\n\t\t\t\t'<imaginary box>': /[+-](?:<ureal box>|(?:inf|nan)\\.0)?i/.source,\n\t\t\t\t'<complex box>': /<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>/.source,\n\t\t\t\t'<num box>': /#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>/.source,\n\n\t\t\t\t'<number>': /(^|[\\s()])(?:<num dec>|<num box>)(?=[()\\s]|$)/.source,\n\t\t\t}), 'i'),\n\t\t\tlookbehind: true\n\t\t},\n\t\t'boolean': {\n\t\t\tpattern: /(^|[\\s()])#(?:[ft]|false|true)(?=[()\\s]|$)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'function': {\n\t\t\tpattern: /((?:^|[^'`#])\\()(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\s]|$)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'identifier': {\n\t\t\tpattern: /(^|[\\s()])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\s]|$)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t'punctuation': /[()']/\n\t};\n\n\t/**\n\t * Given a topologically sorted BNF grammar, this will return the RegExp source of last rule of the grammar.\n\t *\n\t * @param {Record<string, string>} grammar\n\t * @returns {string}\n\t */\n\tfunction SortedBNF(grammar) {\n\t\tfor (var key in grammar) {\n\t\t\tgrammar[key] = grammar[key].replace(/<[\\w\\s]+>/g, function (key) {\n\t\t\t\treturn '(?:' + grammar[key].trim() + ')';\n\t\t\t});\n\t\t}\n\t\t// return the last item\n\t\treturn grammar[key];\n\t}\n\n})(Prism);\n"],"sourceRoot":""}